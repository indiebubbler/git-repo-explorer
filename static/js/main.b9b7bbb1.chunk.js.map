{"version":3,"sources":["actions/repoActions.js","actions/actionTypes.js","actions/userActions.js","components/RepoCart.js","components/Label.js","components/RepoList.js","components/UserList.js","components/GitExplorer.js","actions/store.js","App.js","serviceWorker.js","index.js"],"names":["initialState","repoReducer","newState","state","action","type","payload","isLoading","fetched","items","loginId","repos","searchTerm","users","errorMsg","fetchSuccess","userReducer","RepoCart","Container","className","Row","Col","this","props","repo","name","stargazersCount","description","Component","Label","show","children","defaultProps","RepoList","useState","open","setOpen","dispatch","useDispatch","useSelector","user","userRepos","toggle","o","reposUrl","loginReposTuple","fetchReposRequest","axios","get","then","response","data","map","stargazers_count","fetchReposSuccess","catch","error","Button","onClick","variant","block","login","Collapse","in","length","idx","key","UserList","Alert","hidden","message","GitExplorer","searchInputField","useRef","useEffect","current","focus","onSearchBtn","text","value","trim","userList","repos_url","id","fetchUsers","style","paddingBottom","InputGroup","size","FormControl","ref","onKeyPress","e","charCode","placeholder","allReducers","combineReducers","store","createStore","applyMiddleware","thunk","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.b9b7bbb1.chunk.js","sourcesContent":["import * as actions from './actionTypes'\r\nimport axios from 'axios'\r\n\r\nconst initialState = {}\r\n\r\nconst fetchReposRequest = loginId => {\r\n    return {\r\n        type: actions.FETCH_REPOS_REQUEST,\r\n        payload: loginId\r\n    }\r\n}\r\n\r\nconst clearReposRequest = () => {\r\n    return {\r\n        type: actions.CLEAR_REPOS\r\n    }\r\n}\r\n\r\nconst fetchReposSuccess = repos => {\r\n    return {\r\n        type: actions.FETCH_REPOS_SUCCESS,\r\n        payload: repos\r\n    }\r\n}\r\n\r\nconst fetchReposFailure = errorMsg => {\r\n    return {\r\n        type: actions.FETCH_REPOS_FAILURE,\r\n        payload: errorMsg\r\n    }\r\n}\r\n\r\nconst repoReducer = (state = initialState, action) => {\r\n    let newState;\r\n    switch (action.type) {\r\n        case actions.FETCH_REPOS_REQUEST:\r\n            newState = { ...state }\r\n            newState[action.payload] = {\r\n                isLoading: true,\r\n                fetched: false,\r\n                items: []\r\n            }\r\n            return newState;\r\n        case actions.FETCH_REPOS_SUCCESS:\r\n            newState = { ...state }\r\n            newState[action.payload.loginId] = {\r\n                isLoading: false,\r\n                fetched: true,\r\n                items: action.payload.repos\r\n            }\r\n            return newState;\r\n        case actions.FETCH_REPOS_FAILURE:\r\n            return { ...state }\r\n        case actions.CLEAR_REPOS:\r\n            return { }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default repoReducer;\r\n\r\nexport const clearRepos = () => {\r\n    return function (dispatch) {\r\n        dispatch(clearReposRequest())\r\n    }\r\n}\r\nexport const fetchRepos = (loginReposTuple) => {\r\n    return function (dispatch) {\r\n        const loginId = loginReposTuple.loginId;\r\n        const reposUrl = loginReposTuple.reposUrl;\r\n\r\n        dispatch(fetchReposRequest(loginId))\r\n\r\n        axios.get(reposUrl).then(response => {\r\n            const repos = response.data.map(repo => { return { name: repo.name, stargazersCount: repo.stargazers_count, description: repo.description } })\r\n            const o = {\r\n                loginId: loginId,\r\n                repos: repos\r\n            }\r\n            dispatch(fetchReposSuccess(o));\r\n        }).catch(error => {\r\n            dispatch(fetchReposFailure(error))\r\n        })\r\n    }\r\n}","export const FETCH_USERS_REQUEST = 'fetchUsersRequest'\r\nexport const FETCH_USERS_SUCCESS = 'fetchUsersSuccess'\r\nexport const FETCH_USERS_FAILURE = 'fetchUsersFailure'\r\n\r\nexport const FETCH_REPOS_REQUEST = 'fetchReposRequest'\r\nexport const FETCH_REPOS_SUCCESS = 'fetchReposSuccess'\r\nexport const FETCH_REPOS_FAILURE = 'fetchReposFailure'\r\nexport const CLEAR_REPOS = 'clearRepos'\r\n","import * as actions from './actionTypes'\r\nimport { clearRepos } from './repoActions'\r\nimport axios from 'axios'\r\n\r\nconst initialState = {\r\n    searchTerm: '',\r\n    users: [],\r\n    errorMsg: '',\r\n    isLoading: false,\r\n    fetchSuccess: false\r\n}\r\n\r\nconst fetchUsersRequest = (searchTerm) => {\r\n    return {\r\n        type: actions.FETCH_USERS_REQUEST,\r\n        payload: searchTerm\r\n    }\r\n}\r\n\r\nconst fetchUsersSuccess = users => {\r\n    return {\r\n        type: actions.FETCH_USERS_SUCCESS,\r\n        payload: users\r\n    }\r\n}\r\n\r\nconst fetchUsersFailure = errorMsg => {\r\n    return {\r\n        type: actions.FETCH_USERS_FAILURE,\r\n        payload: errorMsg\r\n    }\r\n}\r\n\r\nconst userReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actions.FETCH_USERS_REQUEST:\r\n            return { ...state, isLoading: true, searchTerm: action.payload, fetchSuccess: false }\r\n        case actions.FETCH_USERS_SUCCESS:\r\n            return { ...state, isLoading: false, users: action.payload, errorMsg: '', fetchSuccess: true }\r\n        case actions.FETCH_USERS_FAILURE:\r\n            return { ...state, isLoading: false, errorMsg: action.payload, users: [] }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default userReducer;\r\n\r\nexport const fetchUsers = (text) => {\r\n    return function (dispatch) {\r\n        dispatch(fetchUsersRequest(text))\r\n\r\n        axios.get(`https://api.github.com/search/users?q=${text}&per_page=5`).then(response => {\r\n            dispatch(clearRepos())\r\n            const userList = response.data.items.map(user => { return { login: user.login, reposUrl: user.repos_url, loginId: user.id } })\r\n            dispatch(fetchUsersSuccess(userList))\r\n        }).catch(error => {\r\n            dispatch(fetchUsersFailure(error))\r\n        })\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport { Container, Row, Col } from 'react-bootstrap'\r\n\r\nclass RepoCart extends Component {\r\n    render() {\r\n        return (\r\n                <Container className='RepoCart'>\r\n                    <Row>\r\n                        <Col>\r\n                            <div className='header title'>{this.props.repo.name}</div>\r\n                        </Col>\r\n                        <Col>\r\n                            <div className='header stars'>{this.props.repo.stargazersCount} ★</div>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Container className='description'>{this.props.repo.description}</Container>\r\n                    </Row>\r\n                </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default RepoCart","import React from 'react'\r\n\r\nconst Label = props => {\r\n    if (props.show) {\r\n        return (<div className='label'>{props.children}</div>)\r\n    }\r\n    else return null;\r\n}\r\n\r\nexport default Label\r\n\r\nLabel.defaultProps ={\r\n    show: true\r\n}","import React, { useState } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { Container, Collapse, Button } from 'react-bootstrap'\r\nimport RepoCart from './RepoCart'\r\nimport { fetchRepos } from '../actions/repoActions'\r\nimport Label from './Label'\r\n\r\nexport const RepoList = props => {\r\n    const [open, setOpen] = useState(false);\r\n    const dispatch = useDispatch();\r\n    const repos = useSelector(state => state.repos);\r\n\r\n    const isLoading = (repos[props.user.loginId] && repos[props.user.loginId].isLoading) || false;\r\n    const fetched = (repos[props.user.loginId] && repos[props.user.loginId].fetched) || false;\r\n    const userRepos = repos[props.user.loginId] ? repos[props.user.loginId].items : []\r\n\r\n    const toggle = () => {\r\n        if (!fetched) {\r\n            const o = { loginId: props.user.loginId, reposUrl: props.user.reposUrl };\r\n            dispatch(fetchRepos(o))\r\n        }\r\n        setOpen(!open)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Button onClick={() => toggle()} variant='expandable' className={open?'expanded':''} block>{props.user.login}</Button>\r\n            <Label show={isLoading}>Loading...</Label>\r\n            \r\n            <Collapse in={open}>\r\n                {/* Bootstrap doesn't want to collapse when no child so wrap it into container to avoid error when user has no repositories */}\r\n                <Container>\r\n                    <Label show={fetched && userRepos.length === 0}>This user has not created any repository yet.</Label>\r\n                    {\r\n                        userRepos.map((repo,idx) => { return (<RepoCart key={'repo_'+idx} repo={repo} />) })\r\n                    }\r\n                </Container>\r\n            </Collapse>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default RepoList;\r\n","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { RepoList } from './RepoList'\r\nimport { Alert } from 'react-bootstrap'\r\nimport Label from './Label';\r\n\r\nexport const UserList = props => {\r\n    const users = useSelector(state => state.users);\r\n    return (\r\n        <>\r\n            <Label show={users.isLoading}>Loading...</Label>\r\n            <Label show={users.fetchSuccess && users.users.length === 0}>There are no users matching your criteria</Label>\r\n\r\n\r\n\r\n            {users.users.length > 0 && !users.isLoading ?\r\n                <div className='UsersContainer'>\r\n                    <Label>Showing users for \"{users.searchTerm}\"</Label>\r\n                    {users.users.map(user => { return <RepoList key={user.loginId} user={user} /> })}\r\n                </div>\r\n                : null}\r\n            <br />\r\n            <Alert variant='danger' hidden={users.errorMsg.length === 0}>Unable to load data: {users.errorMsg.message}</Alert>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default UserList;","import React, { useRef, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux'\r\nimport { InputGroup, FormControl, Button, Container } from 'react-bootstrap'\r\nimport { fetchUsers } from '../actions/userActions'\r\nimport UserList from './UserList';\r\n\r\n\r\nexport const GitExplorer = props => {\r\n    const dispatch = useDispatch();\r\n    const searchInputField = useRef();\r\n\r\n    // after component gets mounted, set the focus on searchBox\r\n    useEffect(() => {\r\n        searchInputField.current.focus()\r\n    });\r\n\r\n    const onKeyUp = (e) => {\r\n        // send search phrase on ENTER key press\r\n        if (e.charCode === 13) {\r\n            onSearchBtn();\r\n        }\r\n    }\r\n\r\n    const onSearchBtn = () => {\r\n        const text = searchInputField.current.value.trim()\r\n        if (text && text.length > 0) {\r\n            dispatch(fetchUsers(text))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container  className='GitExplorer'>\r\n            <h3 style={{paddingBottom: '1rem'}}>GitHub Repositories Explorer</h3>\r\n            <InputGroup size=\"sm\" className=\"mb-3\">\r\n                <FormControl ref={searchInputField} onKeyPress={onKeyUp} placeholder=\"Enter username\" />\r\n            </InputGroup>\r\n            <Button onClick={onSearchBtn} block>\r\n                Search\r\n            </Button>\r\n            <UserList/>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default GitExplorer","import { createStore, combineReducers, applyMiddleware} from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport userReducer from './userActions'\r\nimport repoReducer from './repoActions'\r\n// import { composeWithDevTools } from 'redux-devtools-extension'\r\n\r\nconst allReducers = combineReducers({users: userReducer, repos: repoReducer})\r\nconst store = createStore(allReducers, applyMiddleware(thunk))\r\n// const store = createStore(allReducers, compose(applyMiddleware(thunk), composeWithDevTools()))\r\n\r\nexport default store","import React from 'react';\nimport GitExplorer from './components/GitExplorer'\nimport { Provider } from 'react-redux';\nimport store from './actions/store';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n// it's important to import our custom css after bootstrap as we're overriding stuff in there\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Provider store={store}>\n        <GitExplorer />\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}